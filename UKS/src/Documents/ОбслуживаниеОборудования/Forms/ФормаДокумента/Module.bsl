
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РуководительГруппы = ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("РуководительПодразделения");
		НоваяСтрока = Объект.ОтветственныеЛицаРемонта.Добавить();
		НоваяСтрока.Сотрудник = РуководительГруппы;
		НоваяСтрока.Должность = РуководительГруппы.Должность;
		
		НоваяСтрока = Объект.ОтветственныеЛицаРемонта.Добавить();
		НоваяСтрока.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
		НоваяСтрока.Должность = ПараметрыСеанса.ТекущийПользователь.Должность;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Оборудование) Тогда
		
		ЗаполнитьОписаниеОборудования(); 
		
	КонецЕсли;
	
	ОпределитьВидимостьКолонок();
	
КонецПроцедуры

&НаСервере
Процедура ОборудованиеПриИзмененииНаСервере()
	
	ЗаполнитьОписаниеОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)
	ОборудованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеОборудования()
	
	ОборудованиеИнвентарныйНомер = Строка(Формат(Объект.Оборудование.ИнвентарныйНомер,"ЧГ=0"));
	ОборудованиеИзготовитель = Объект.Оборудование.Изготовитель;
	Элементы.ОборудованиеРазмещение.Заголовок = "каб. "+Объект.Оборудование.Размещение;
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьКолонок()
	
	Элементы.Работа.ПодчиненныеЭлементы.РаботаСтоимостьИзъятого.Видимость = Ложь;
	Элементы.Работа.ПодчиненныеЭлементы.РаботаСтоимостьУстановленного.Видимость = Ложь;

	Если ЗначениеЗаполнено(Объект.ВидОбслуживания) Тогда
		ЗначениеВидРаботыРемонт = Справочники.ВидыОбслуживания.НайтиПоНаименованию("Ремонт");
		ЗначениеВидРаботыМодернизация = Справочники.ВидыОбслуживания.НайтиПоНаименованию("Модернизация");
		
				
		Если Объект.ВидОбслуживания=ЗначениеВидРаботыРемонт Тогда
			//Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятая.Видимость = Ложь;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятаяПечать.Видимость = Истина;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаОснование.Видимость = Истина;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаКоличество.Видимость = Ложь;
		КонецЕсли;	
		
		Если Объект.ВидОбслуживания=ЗначениеВидРаботыМодернизация Тогда
			//Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятая.Видимость = Ложь;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятаяПечать.Видимость = Истина;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаОснование.Видимость = Истина;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаКоличество.Видимость = Истина;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаСтоимостьИзъятого.Видимость = Истина;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаСтоимостьУстановленного.Видимость = Истина;
		КонецЕсли;
		
		Если НЕ Объект.ВидОбслуживания=ЗначениеВидРаботыМодернизация И
			 НЕ Объект.ВидОбслуживания=ЗначениеВидРаботыРемонт Тогда
			//Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятая.Видимость = Ложь;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятаяПечать.Видимость = Ложь;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаОснование.Видимость = Ложь;
			Элементы.Работа.ПодчиненныеЭлементы.РаботаКоличество.Видимость = Ложь;
		КонецЕсли;
	Иначе
		//Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятая.Видимость = Ложь;
		Элементы.Работа.ПодчиненныеЭлементы.РаботаНоменклатураИзъятаяПечать.Видимость = Ложь;
		Элементы.Работа.ПодчиненныеЭлементы.РаботаОснование.Видимость = Ложь;
		Элементы.Работа.ПодчиненныеЭлементы.РаботаКоличество.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбслуживанияПриИзменении(Элемент)
	
	ОпределитьВидимостьКолонок();
	
КонецПроцедуры

&НаСервере
Процедура КомандаПечатьНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыПередачиНаСервере()
	
	ПереданныеПараметры = Новый Структура();
	РуководительОрганизации = ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("Руководитель");
	ПереданныеПараметры.Вставить("Руководитель",РуководительОрганизации.Наименование);
	ПереданныеПараметры.Вставить("ДатаАкта",Формат(Объект.Дата,"ДЛФ=DD"));
	ПереданныеПараметры.Вставить("Подразделение",Объект.Подразделение.Наименование);
	ПереданныеПараметры.Вставить("ИнвентарныйНомер",Объект.Оборудование.ИнвентарныйНомер);
	
	Возврат ПереданныеПараметры;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыТаблиц()
	
	ПараметрыТаблиц = Новый Структура();
	
	ТаблицаНоменклатуры = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.Работа Цикл
		СтрокаРаботы = Новый Структура();
		СтрокаРаботы.Вставить("Работа",СтрокаТаблицы.Работа);
		СтрокаРаботы.Вставить("Номенклатура",СтрокаТаблицы.НоменклатураПечать);
		СтрокаРаботы.Вставить("НоменклатураРодитель","");
		СтрокаРаботы.Вставить("НоменклатураИзъятая",СтрокаТаблицы.НоменклатураИзъятаяПечать);
		СтрокаРаботы.Вставить("НоменклатураИзъятаяРодитель","");
		СтрокаРаботы.Вставить("Основание",СтрокаТаблицы.Основание);
		СтрокаРаботы.Вставить("Количество",СтрокаТаблицы.Количество);
		СтрокаРаботы.Вставить("СтоимостьИзъятого",СтрокаТаблицы.СтоимостьИзъятого);
		СтрокаРаботы.Вставить("СтоимостьУстановленного",СтрокаТаблицы.СтоимостьУстановленного);
		ТаблицаНоменклатуры.Добавить(СтрокаРаботы);
	КонецЦикла;
	
	ТаблицаОтветственныхЛиц = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.ОтветственныеЛицаРемонта Цикл
		СтрокаОтветственныеЛица = Новый Структура();
		СтрокаОтветственныеЛица.Вставить("Сотрудник",СтрокаТаблицы.Сотрудник.Наименование);
		СтрокаОтветственныеЛица.Вставить("Должность",СтрокаТаблицы.Должность);
		ТаблицаОтветственныхЛиц.Добавить(СтрокаОтветственныеЛица);
	КонецЦикла;
	
	ПараметрыТаблиц.Вставить("ТаблицаНоменклатуры",ТаблицаНоменклатуры);
	ПараметрыТаблиц.Вставить("ТаблицаОтветственныхЛиц",ТаблицаОтветственныхЛиц);
	
	Возврат ПараметрыТаблиц;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("doc");
	
	Если Объект.ВидОбслуживания.ИмяПредопределенныхДанных = "Ремонт" Тогда 
		//Макет = УправлениеПечатьюСервер.ПолучитьОбщийМакетНаСервере("АктРемонтаОборудования");
		Макет = ПолучитьОбщийМакет("АктРемонтаОборудования");
		Макет.Записать(ПолноеИмяФайла);	
	ИначеЕсли Объект.ВидОбслуживания.ИмяПредопределенныхДанных = "Ремонт" Тогда
		Макет = УправлениеПечатьюСервер.ПолучитьОбщийМакетНаСервере("АктМодернизацииОборудования");
		Макет.Записать(ПолноеИмяФайла);	
	Иначе
	    Макет = Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетШаблонаПечатнойФормы(СсылкаОбъекта,ПараметрыКоманды);
	
	СтрокаОбъектМетаданных = СсылкаОбъекта.Метаданные().ПолноеИмя();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныПечатныхФорм.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ШаблоныПечатныхФорм.ПараметрыКоманды КАК ПараметрыКоманды,
		|	ШаблоныПечатныхФорм.Шаблон КАК Шаблон,
		|	ШаблоныПечатныхФорм.ПометкаУдаления КАК ПометкаУдаления,
		|	ШаблоныПечатныхФорм.РасширениеФайла КАК РасширениеФайла
		|ИЗ
		|	Справочник.ШаблоныПечатныхФорм КАК ШаблоныПечатныхФорм
		|ГДЕ
		|	ШаблоныПечатныхФорм.ПараметрыКоманды = &ПараметрыКоманды
		|	И ШаблоныПечатныхФорм.ОбъектМетаданных = &ОбъектМетаданных
		|	И ШаблоныПечатныхФорм.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ОбъектМетаданных", СтрокаОбъектМетаданных);
	Запрос.УстановитьПараметр("ПараметрыКоманды", ПараметрыКоманды);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ФайлДвоичныеДанные",ПоместитьВоВременноеХранилище(ВыборкаДетальныеЗаписи.Шаблон.Получить(),Новый УникальныйИдентификатор()));
		Результат.Вставить("Расширение",ВыборкаДетальныеЗаписи.РасширениеФайла);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПечатьАктНаСервере()
	
	МакетШаблона = ИмяВременногоФайла;
	
	//Состояние("Вывод в MS-WORD",0,"Подготовка документа...",БиблиотекаКартинок.Информация);
	Если Объект.ВидОбслуживания = ПредопределенноеЗначение("Справочник.ВидыОбслуживания.Ремонт") Тогда
		НомерКолонкиНоменклатураИзъятая = 2;
		НомерКолонкиОснованиеИзъятия = 3;
		НомерКолонкиИнверныйНомер = 4;
		НомерКолонкиНоменклатура = 5;
		НомерКолонкиОснование = 6;
	ИначеЕсли Объект.ВидОбслуживания = ПредопределенноеЗначение("Справочник.ВидыОбслуживания.Модернизация") Тогда
		НомерКолонкиНоменклатураИзъятая = 2;
		НомерКолонкиОснованиеИзъятия = 3;
		НомерКолонкиСтоимостьИзъятия = 4;
		НомерКолонкиИнверныйНомер = 5;
		НомерКолонкиНоменклатура = 6;
		НомерКолонкиОснование = 7;
		НомерКолонкиКоличество = 8;
		НомерКолонкиСтоимостьУстановленного = 9;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПереданныеПараметры = ПодготовитьПараметрыПередачиНаСервере();
	ПараметрыТаблиц = ПолучитьПараметрыТаблиц();
	А = 0;
	
	Попытка
		MSWord = Новый COMОбъект("Word.Application");
		//MSWord = Новый ПолучитьCOMОбъект(,"Word.Application");
		MSWord.Visible = 0;
		MSWord.Application.DisplayAlerts = ложь;
		MSWord.Documents.ADD();
		
		Документ = MSWord.Documents.Open(МакетШаблона);
		Документ.Activate();
		//Состояние("Вывод в MS-WORD",15,"Вывод основных параметров...",БиблиотекаКартинок.Информация);
		Для Каждого ЭлементПараметр Из ПереданныеПараметры Цикл
			ОбъектДляЗамены = Документ.Content.Find;
			ОбъектДляЗамены.Execute("["+ЭлементПараметр.Ключ+"]",
									Ложь,
									Истина,
									Ложь,
									,
									,
									Истина,
									,
									Ложь,
									ЭлементПараметр.Значение);
		КонецЦикла;			  
		
		//Таблица номенклатуры
		ТаблицаВорд = Документ.Tables(1);		

		НомерСтроки = 3;
		НП = 1;
		//Состояние("Вывод в MS-WORD",40,"Вывод таблицы номенклатуры...",БиблиотекаКартинок.Информация);
		Для Каждого СтрокаТаблицы Из ПараметрыТаблиц.ТаблицаНоменклатуры Цикл
			
			ТаблицаВорд.Rows.Add();
			
			НомерПоПорядку = ТаблицаВорд.Cell(НомерСтроки, 1).Range;
			НомерПоПорядку.Text = НП;
			
			НоменклатраИзъятая = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиНоменклатураИзъятая).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураИзъятая) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураИзъятаяРодитель) Тогда
					НоменклатраИзъятая.Text = СтрШаблон("%2 %1",СтрокаТаблицы.НоменклатураИзъятая,СтрокаТаблицы.НоменклатураИзъятаяРодитель);
				Иначе
					НоменклатраИзъятая.Text = СтрокаТаблицы.НоменклатураИзъятая;
				КонецЕсли;
			Иначе
				НоменклатраИзъятая.Text = "-";
			КонецЕсли;
			
			Основание = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиОснованиеИзъятия).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Основание) Тогда
				Основание.Text = СтрокаТаблицы.Основание;
			Иначе
				Основание.Text = "-";
			КонецЕсли;
			
			ИнвентарныйНомер = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиИнверныйНомер).Range;
			ИнвентарныйНомер.Text = ПереданныеПараметры.ИнвентарныйНомер;
			
			Номенклатура = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиНоменклатура).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураРодитель) Тогда
					Номенклатура.Text = СтрШаблон("%2 %1",СтрокаТаблицы.Номенклатура,СтрокаТаблицы.НоменклатураРодитель);
				Иначе	
					Номенклатура.Text = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
			Иначе
				Номенклатура.Text = "-";
			КонецЕсли;
			
			Работа = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиОснование).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Работа) Тогда
				Работа.Text = СтрокаТаблицы.Работа;
			Иначе
				Работа.Text = "-";
			КонецЕсли;
			
			Если Объект.ВидОбслуживания = ПредопределенноеЗначение("Справочник.ВидыОбслуживания.Модернизация") Тогда
				СтоимостьИзъятого =  ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиСтоимостьИзъятия).Range;
				Если СтрокаТаблицы.СтоимостьИзъятого<>0 Тогда
					СтоимостьИзъятого.Text = СтрокаТаблицы.СтоимостьИзъятого;	
				Иначе	
					СтоимостьИзъятого.Text = "-";
				КонецЕсли;
				
				КолВоУстановленного = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиКоличество).Range;
				Если СтрокаТаблицы.Количество<>0 Тогда
					КолВоУстановленного.Text = СтрокаТаблицы.Количество;
				Иначе
					КолВоУстановленного.Text = "-";
				КонецЕсли;
				
				СтоимостьУстановленного = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиСтоимостьУстановленного).Range;
				Если СтрокаТаблицы.СтоимостьУстановленного<>0 Тогда
					СтоимостьУстановленного.Text = СтрокаТаблицы.СтоимостьУстановленного;
				Иначе
					СтоимостьУстановленного.Text = "-";
				КонецЕсли;
			КонецЕсли;
			
			
			НП = НП+1;
			НомерСтроки = НомерСтроки+1;
			
		КонецЦикла;
		
		ТаблицаВорд2 = Документ.Tables(2);
			
		НомерСтроки = 1;
		НП = 1;
		//Состояние("Вывод в MS-WORD",85,"Вывод таблицы номенклатуры...",БиблиотекаКартинок.Информация);
		Для Каждого СтрокаТаблицы Из ПараметрыТаблиц.ТаблицаОтветственныхЛиц Цикл
			
			Если НомерСтроки=1 Тогда
			Иначе
				ТаблицаВорд2.Rows.Add();
			КонецЕсли;
				
			Должность = ТаблицаВорд2.Cell(НомерСтроки, 1).Range;
			Должность.Text = СтрокаТаблицы.Должность;
			
			Подпись = ТаблицаВорд2.Cell(НомерСтроки, 2).Range;
			Подпись.Text = "__________________";
			
			Сотрудник = ТаблицаВорд2.Cell(НомерСтроки, 3).Range;
			Сотрудник.Text = СтрокаТаблицы.Сотрудник;
			
			НП = НП+1;
			
			НомерСтроки = НомерСтроки+1;
			
		КонецЦикла;
		
		//Состояние("Вывод в MS-WORD",85,"Сохранение...",БиблиотекаКартинок.Информация);
		//ПолноеИмяФайла = ПолучитьИмяВременногоФайла("docx");
		Документ.SaveAS(МакетШаблона);
		Документ.Close();
		MSWord.Quit();
 
		Результат = Новый ДвоичныеДанные(МакетШаблона);
		#Если Клиент Тогда
			НачатьУдалениеФайлов(,МакетШаблона);
		#Иначе
			УдалитьФайлы(МакетШаблона);
		#КонецЕсли
	Исключение
 		// Если произойдет ошибка выводятся данные об ошибке и объект закрывается. 
 		Сообщить(ОписаниеОшибки()); 
 		//MSWord.Application.Quit(); 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
 
&НаКлиенте
Функция ПечатьАктНаКлиенте()
	
	МакетШаблона = ИмяВременногоФайла;
	
	Состояние("Вывод в MS-WORD",0,"Подготовка документа...",БиблиотекаКартинок.Информация);
	Если Объект.ВидОбслуживания = ПредопределенноеЗначение("Справочник.ВидыОбслуживания.Ремонт") Тогда
		НомерКолонкиНоменклатураИзъятая = 2;
		НомерКолонкиОснованиеИзъятия = 3;
		НомерКолонкиИнверныйНомер = 4;
		НомерКолонкиНоменклатура = 5;
		НомерКолонкиОснование = 6;
	ИначеЕсли Объект.ВидОбслуживания = ПредопределенноеЗначение("Справочник.ВидыОбслуживания.Модернизация") Тогда
		НомерКолонкиНоменклатураИзъятая = 2;
		НомерКолонкиОснованиеИзъятия = 3;
		НомерКолонкиСтоимостьИзъятия = 4;
		НомерКолонкиИнверныйНомер = 5;
		НомерКолонкиНоменклатура = 6;
		НомерКолонкиОснование = 7;
		НомерКолонкиКоличество = 8;
		НомерКолонкиСтоимостьУстановленного = 9;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПереданныеПараметры = ПодготовитьПараметрыПередачиНаСервере();
	ПараметрыТаблиц = ПолучитьПараметрыТаблиц();
	А = 0;
	
	Попытка
		MSWord = Новый COMОбъект("Word.Application");
		//MSWord = Новый ПолучитьCOMОбъект(,"Word.Application");
		MSWord.Visible = 0;    
    	MSWord.Application.DisplayAlerts = ложь;
        
    	MSWord.Documents.ADD();
		
		Документ = MSWord.Documents.Open(МакетШаблона);
		Документ.Activate();
		Состояние("Вывод в MS-WORD",15,"Вывод основных параметров...",БиблиотекаКартинок.Информация);
		Для Каждого ЭлементПараметр Из ПереданныеПараметры Цикл
			ОбъектДляЗамены = Документ.Content.Find;
			ОбъектДляЗамены.Execute("["+ЭлементПараметр.Ключ+"]",
									Ложь,
									Истина,
									Ложь,
									,
									,
									Истина,
									,
									Ложь,
									ЭлементПараметр.Значение);
		КонецЦикла;			  
		
		//Таблица номенклатуры
		ТаблицаВорд = Документ.Tables(1);		

		НомерСтроки = 3;
		НП = 1;
		Состояние("Вывод в MS-WORD",40,"Вывод таблицы номенклатуры...",БиблиотекаКартинок.Информация);
		Для Каждого СтрокаТаблицы Из ПараметрыТаблиц.ТаблицаНоменклатуры Цикл
			
			ТаблицаВорд.Rows.Add();
			
			НомерПоПорядку = ТаблицаВорд.Cell(НомерСтроки, 1).Range;
			НомерПоПорядку.Text = НП;
			
			НоменклатраИзъятая = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиНоменклатураИзъятая).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураИзъятая) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураИзъятаяРодитель) Тогда
					НоменклатраИзъятая.Text = СтрШаблон("%2 %1",СтрокаТаблицы.НоменклатураИзъятая,СтрокаТаблицы.НоменклатураИзъятаяРодитель);
				Иначе
					НоменклатраИзъятая.Text = СтрокаТаблицы.НоменклатураИзъятая;
				КонецЕсли;
			Иначе
				НоменклатраИзъятая.Text = "-";
			КонецЕсли;
			
			Основание = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиОснованиеИзъятия).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Основание) Тогда
				Основание.Text = СтрокаТаблицы.Основание;
			Иначе
				Основание.Text = "-";
			КонецЕсли;
			
			ИнвентарныйНомер = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиИнверныйНомер).Range;
			ИнвентарныйНомер.Text = ПереданныеПараметры.ИнвентарныйНомер;
			
			Номенклатура = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиНоменклатура).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураРодитель) Тогда
					Номенклатура.Text = СтрШаблон("%2 %1",СтрокаТаблицы.Номенклатура,СтрокаТаблицы.НоменклатураРодитель);
				Иначе	
					Номенклатура.Text = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
			Иначе
				Номенклатура.Text = "-";
			КонецЕсли;
			
			Работа = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиОснование).Range;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Работа) Тогда
				Работа.Text = СтрокаТаблицы.Работа;
			Иначе
				Работа.Text = "-";
			КонецЕсли;
			
			Если Объект.ВидОбслуживания = ПредопределенноеЗначение("Справочник.ВидыОбслуживания.Модернизация") Тогда
				СтоимостьИзъятого =  ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиСтоимостьИзъятия).Range;
				Если СтрокаТаблицы.СтоимостьИзъятого<>0 Тогда
					СтоимостьИзъятого.Text = СтрокаТаблицы.СтоимостьИзъятого;	
				Иначе	
					СтоимостьИзъятого.Text = "-";
				КонецЕсли;
				
				КолВоУстановленного = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиКоличество).Range;
				Если СтрокаТаблицы.Количество<>0 Тогда
					КолВоУстановленного.Text = СтрокаТаблицы.Количество;
				Иначе
					КолВоУстановленного.Text = "-";
				КонецЕсли;
				
				СтоимостьУстановленного = ТаблицаВорд.Cell(НомерСтроки, НомерКолонкиСтоимостьУстановленного).Range;
				Если СтрокаТаблицы.СтоимостьУстановленного<>0 Тогда
					СтоимостьУстановленного.Text = СтрокаТаблицы.СтоимостьУстановленного;
				Иначе
					СтоимостьУстановленного.Text = "-";
				КонецЕсли;
			КонецЕсли;
			
			
			НП = НП+1;
			НомерСтроки = НомерСтроки+1;
			
		КонецЦикла;
		
		ТаблицаВорд2 = Документ.Tables(2);
			
		НомерСтроки = 1;
		НП = 1;
		Состояние("Вывод в MS-WORD",85,"Вывод таблицы номенклатуры...",БиблиотекаКартинок.Информация);
		Для Каждого СтрокаТаблицы Из ПараметрыТаблиц.ТаблицаОтветственныхЛиц Цикл
			
			Если НомерСтроки=1 Тогда
			Иначе
				ТаблицаВорд2.Rows.Add();
			КонецЕсли;
				
			Должность = ТаблицаВорд2.Cell(НомерСтроки, 1).Range;
			Должность.Text = СтрокаТаблицы.Должность;
			
			Подпись = ТаблицаВорд2.Cell(НомерСтроки, 2).Range;
			Подпись.Text = "__________________";
			
			Сотрудник = ТаблицаВорд2.Cell(НомерСтроки, 3).Range;
			Сотрудник.Text = СтрокаТаблицы.Сотрудник;
			
			НП = НП+1;
			
			НомерСтроки = НомерСтроки+1;
			
		КонецЦикла;
		
		Состояние("Вывод в MS-WORD",85,"Сохранение...",БиблиотекаКартинок.Информация);
		//ПолноеИмяФайла = ПолучитьИмяВременногоФайла("docx");
		Документ.SaveAS(МакетШаблона);
		Документ.Close();
		MSWord.Quit();
 
		Результат = Новый ДвоичныеДанные(МакетШаблона);
		#Если Клиент Тогда
			НачатьУдалениеФайлов(,МакетШаблона);
		#Иначе
			УдалитьФайлы(МакетШаблона);
		#КонецЕсли
	Исключение
 		// Если произойдет ошибка выводятся данные об ошибке и объект закрывается. 
 		Сообщить(ОписаниеОшибки()); 
 		//MSWord.Application.Quit(); 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключить(УстановитьЕслиНеПодключено) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами(
				Новый ОписаниеОповещения( "ПослеПодключения", ЭтотОбъект, УстановитьЕслиНеПодключено));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключения(Подключено,УстановитьЕслиНеПодключено) Экспорт
	
	#Если ВебКлиент Тогда 
		Если Подключено Тогда
			//Состояние("Идет чтение файла. Ждите….");
			НачатьПолучениеКаталогаВременныхФайлов(
					Новый ОписаниеОповещения("ПослеПолученияКаталогаВременныхФайлов",ЭтотОбъект));
		ИначеЕсли УстановитьЕслиНеПодключено Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(
					Новый ОписаниеОповещения( "Подключить",ЭтотОбъект, Ложь));
		Иначе
			ВызватьИсключение "Не удалось подключить расширение работы с файлами!";
		КонецЕсли;
	#Иначе
		 НачатьПолучениеКаталогаВременныхФайлов(
					Новый ОписаниеОповещения("ПослеПолученияКаталогаВременныхФайлов",ЭтотОбъект));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаШаблона(ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
		Состояние("Вывод в MS-WORD",0,"Вывод...",БиблиотекаКартинок.Информация);
		Результат = ПечатьАктНаСервере();
	#Иначе
		Результат = ПечатьАктНаКлиенте();
	#КонецЕсли 
		
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Состояние("Вывод в MS-WORD",100,"Вывод...",БиблиотекаКартинок.Информация);
	УправлениеПечатьюКлиентСервер.ДокументПоказать(Результат,3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов,ДополнительныеПараметры) Экспорт
	
	Результат = ПолучитьМакетШаблонаПечатнойФормы(Объект.Ссылка,Строка(Объект.ВидОбслуживания));
	#Если ВебКлиент Тогда 
		ИмяВременногоФайла = ИмяКаталогаВременныхФайлов+"\"+Строка(Объект.ВидОбслуживания)+"_"+СокрЛП(Объект.Номер)+"_"+Формат(Объект.Дата,"ДФ=ддммгггг")+"."+Результат.Расширение;
	#Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Результат.Расширение);
	#КонецЕсли
	ФайлШаблона = ПолучитьИзВременногоХранилища(Результат.ФайлДвоичныеДанные);
	ФайлШаблона.НачатьЗапись(
		Новый ОписаниеОповещения("ПослеЗаписиФайлаШаблона",ЭтотОбъект,ИмяВременногоФайла),ИмяВременногоФайла);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	
	Записать();
	Подключить(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОснований(ТипОснования)
	
	ТипОснования = Перечисления.ТипыОснования[ТипОснования];
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Основания.Наименование КАК Наименование,
		|	Основания.ТипОснования КАК ТипОснования
		|ИЗ
		|	Справочник.Основания КАК Основания
		|ГДЕ
		|	Основания.ТипОснования = &ТипОснования";
	
	Запрос.УстановитьПараметр("ТипОснования", ТипОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивОснований = Новый Массив();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОснований.Добавить(ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат МассивОснований;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СписокВыбораПоляОснованиеИзъятия = Элементы.РаботаОснование.СписокВыбора;
	СписокВыбораПоляОснованиеРемонта = Элементы.РаботаРабота.СписокВыбора;
	
	МассивОснований = ПолучитьМассивОснований("Ремонт");
	Для Каждого ЭлементМассива Из МассивОснований Цикл
		СписокВыбораПоляОснованиеРемонта.Добавить(ЭлементМассива,ЭлементМассива);
	КонецЦикла;
	
	МассивОснований = ПолучитьМассивОснований("Изъятие");
	Для Каждого ЭлементМассива Из МассивОснований Цикл
		СписокВыбораПоляОснованиеИзъятия.Добавить(ЭлементМассива,ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДолжностьСотрудникаНаСервере(СтрокаТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти.Должность = ОбщегоНазначенияНаСервере.ПолучитьДолжностьНаСервере(СтрокаТабличнойЧасти.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаРемонтаСотрудникПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОтветственныеЛицаРемонта.ТекущиеДанные;
	УстановитьДолжностьСотрудникаНаСервере(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаРемонтаСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
КонецПроцедуры

&НаСервере
Процедура ПодразделениеРуководительПриИзмененииНаСервере()
	
	Объект.Подразделение = Объект.ПодразделениеРуководитель.Подразделение;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеРуководительПриИзменении(Элемент)
	ПодразделениеРуководительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Объект.ПодразделениеРуководитель = Объект.Подразделение.Руководитель;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ОборудованиеИнвентарныйНомерПриИзмененииНаСервере(ИнвентарныйНомер)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Оборудование.Ссылка КАК Ссылка,
		|	Оборудование.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	Справочник.Оборудование КАК Оборудование
		|ГДЕ
		|	Оборудование.ИнвентарныйНомер = &ИнвентарныйНомер";
	
	Запрос.УстановитьПараметр("ИнвентарныйНомер", Число(ИнвентарныйНомер));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НайденноеЗначение = Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		НайденноеЗначение = ВыборкаДетальныеЗаписи.ССылка;
		//ЗаполнитьОписаниеОборудования();
		
	КонецЕсли;

	Возврат НайденноеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОборудованиеИнвентарныйНомерПриИзменении(Элемент)
	
	НайденоеОборудование = ОборудованиеИнвентарныйНомерПриИзмененииНаСервере(ОборудованиеИнвентарныйНомер);
	
	Если НайденоеОборудование=Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не найдено оборудование в базе'");
		Сообщение.Поле = "Объект.Оборудование";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	Иначе
		Объект.Оборудование = НайденоеОборудование;
		ЗаполнитьОписаниеОборудования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// ЗаполнитьОписаниеОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокНажатие(Элемент)
	
	ОбщегоНазначенияКлиент.ПроверитьПравописаниеТекста(Объект.Описание,Новый Структура,"Описание",ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ПроверкаПравописания_ИзмененТекст") И (Источник = ЭтаФорма) Тогда
		Объект.Описание = Параметр.Текст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстНаименования(Значение)
	
	Результат = СокрЛП(Значение.Наименование);
	Если ЗначениеЗаполнено(Значение.Родитель) Тогда
		Результат = СокрЛП(Значение.Родитель.Наименование)+" "+СокрЛП(Значение.Наименование)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораНоменклатура(Значение,ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Работа.ТекущиеДанные[ДополнительныеПараметры[0]]=ПолучитьТекстНаименования(Значение);
	Элементы.Работа.ТекущиеДанные[ДополнительныеПараметры[1]]=Значение;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаНоменклатураИзъятаяПечатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	
	ПараметрыПоляДляЗаписи = Новый Массив();
	ПараметрыПоляДляЗаписи.Добавить("НоменклатураИзъятаяПечать");
	ПараметрыПоляДляЗаписи.Добавить("НоменклатураИзъятая");

	ПослеВыбораНоменклатуры = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораНоменклатура",ЭтотОбъект,ПараметрыПоляДляЗаписи);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,,ПослеВыбораНоменклатуры,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаНоменклатураПечатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	
	ПараметрыПоляДляЗаписи = Новый Массив();
	ПараметрыПоляДляЗаписи.Добавить("НоменклатураПечать");
	ПараметрыПоляДляЗаписи.Добавить("Номенклатура");

	ПослеВыбораНоменклатуры = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораНоменклатура",ЭтотОбъект,ПараметрыПоляДляЗаписи);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,,ПослеВыбораНоменклатуры,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаНоменклатураИзъятаяПечатьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
КонецПроцедуры




