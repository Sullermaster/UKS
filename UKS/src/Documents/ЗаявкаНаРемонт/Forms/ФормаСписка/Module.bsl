&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МесяцОтбора.ДатаНачала = НачалоМесяца(ТекущаяДата());
	МесяцОтбора.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ЗачеркнутьУдаленое();
	Если Не РольДоступна("Администратор") Тогда
		Если ПараметрыСеанса.ТекущийПользователь.Пользователь = Истина Тогда
			
			ОтборПоПодразделению = ПараметрыСеанса.ТекущийПользователь.Подразделение;	
			ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Подразделение", ПараметрыСеанса.ТекущийПользователь.Подразделение,ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
			
			Элементы.Сотрудник.Видимость = Истина;
			
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Подразделение", "ОтборПоПодразделению");
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НоваяСвязь);
			НовыйФиксМасс = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.СотрудникПодразделения.СвязиПараметровВыбора = НовыйФиксМасс;
			
		Иначе
			ОтборПоПодразделению = ПараметрыСеанса.ТекущийПользователь.Подразделение;
			СотрудникПодразделения = ПараметрыСеанса.ТекущийПользователь;
			ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Сотрудник",ПараметрыСеанса.ТекущийПользователь,ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
			Элементы.СотрудникПодразделения.Видимость = Ложь;
		КонецЕсли;
		Элементы.ПринятыеМной.Видимость = Ложь;
		ОтборПоДате(); 
	Иначе
		ОтборНовые = Истина;
		ОтборПринятые = Истина;
		ОтборЗадачиРемонта();
		МасПарам = Новый Массив();
		МасПарам.Добавить(Новый ПараметрВыбора("Отбор.Подразделение", Справочники.Подразделения.НайтиПоНаименованию("САПР")));
		МасПарам.Добавить(Новый ПараметрВыбора("Отбор.Пользователь", Ложь));
		ФиксМасс = Новый ФиксированныйМассив(МасПарам);
		Элементы.ОтборСотрудникСАПР.ПараметрыВыбора = ФиксМасс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	Если МесяцОтбора.ДатаОкончания = Дата(1,1,1,0,0,0) Тогда
		ДатаОкончанияПер = КонецГода(ТекущаяДата());
	Иначе
		ДатаОкончанияПер = МесяцОтбора.ДатаОкончания;
	КонецЕсли;
	ОтборПоЗадачеРемонтаНовый = Перечисления.СостояниеРемонта.ПустаяСсылка();
	ОтборПоЗадачеРемонтаПринятый = Перечисления.СостояниеРемонта.ПустаяСсылка();
	ОтборПоЗадачеРемонтаГотовый = Перечисления.СостояниеРемонта.ПустаяСсылка();
	
	Если ОтборНовые = Истина И ОтборПринятые = Истина И ОтборГотовые = Истина Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
	ИначеЕсли ОтборНовые = Истина И ОтборПринятые = Истина И ОтборГотовые = Ложь Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
	ИначеЕсли ОтборНовые = Истина И ОтборПринятые = Ложь И ОтборГотовые = Истина Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Истина И ОтборГотовые = Истина Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
	ИначеЕсли ОтборНовые = Истина И ОтборПринятые = Ложь И ОтборГотовые = Ложь Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Истина И ОтборГотовые = Ложь Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Ложь И ОтборГотовые = Истина Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Ложь И ОтборГотовые = Ложь Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
	КонецЕсли;
	
	ТаблДок = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
		
		Макет = Документы.ЗаявкаНаРемонт.ПолучитьМакет("МакетПечатиСписка");
		Если Проведённые = 2 Тогда
			Пров = Истина;
		ИначеЕсли Проведённые = 1 Тогда
			Пров = Ложь;
		Иначе
			Пров = Неопределено;
		КонецЕсли;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Номер КАК Номер,
		|	ЗаявкаНаРемонт.Дата КАК Дата,
		|	ЗаявкаНаРемонт.Сотрудник КАК Сотрудник,
		|	ЗаявкаНаРемонт.ОписаниеПроблемы КАК ОписаниеПроблемы,
		|	ЗаявкаНаРемонт.Оборудование КАК Оборудование,
		|	ЗаявкаНаРемонт.ЗадачиРемонта КАК ЗадачиРемонта,
		|	ЗаявкаНаРемонт.ОписаниеРешения КАК ОписаниеРешения,
		|	ЗаявкаНаРемонт.ПоискИнвентарныйНомер КАК ПоискИнвентарныйНомер,
		|	ЗаявкаНаРемонт.Сотрудник.Подразделение КАК СотрудникПодразделение,
		|	ЗаявкаНаРемонт.Подразделение КАК Подразделение,
		|	ЗаявкаНаРемонт.Проведен КАК Проведен,
		|	ЗаявкаНаРемонт.ДатаВыполнения КАК ДатаВыполнения,
		|	ЗаявкаНаРемонт.ВыполнившийСотрудник КАК ВыполнившийСотрудник,
		|	ЗаявкаНаРемонт.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗаявкаНаРемонт.Кабинет КАК Кабинет
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	&Подразделение В (ЗаявкаНаРемонт.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
		|	И ЗаявкаНаРемонт.ЗадачиРемонта В ИЕРАРХИИ(&ЗадачиРемонта)
		|	И &Сотрудник В (ЗаявкаНаРемонт.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|	И &Проведен В (ЗаявкаНаРемонт.Проведен, НЕОПРЕДЕЛЕНО)
		|	И ЗаявкаНаРемонт.Дата МЕЖДУ &Начало И &Конец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";    
		Запрос.УстановитьПараметр("Подразделение", ОтборПоПодразделению);
		Запрос.УстановитьПараметр("ЗадачиРемонта", МассивЗадач);
		Запрос.УстановитьПараметр("Сотрудник", СотрудникПодразделения);		
		Запрос.УстановитьПараметр("Проведен", Пров);
		Запрос.УстановитьПараметр("Начало", МесяцОтбора.ДатаНачала);
		Запрос.УстановитьПараметр("Конец", ДатаОкончанияПер);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Зал = Макет.ПолучитьОбласть("Заголов");
	Зал.Параметры.ДатаНачала = Формат(МесяцОтбора.ДатаНачала, "ДЛФ=Д");
	Зал.Параметры.ДатаОкончания = Формат(МесяцОтбора.ДатаОкончания, "ДЛФ=Д");
	
		Если Не ОтборПоПодразделению = Справочники.Подразделения.ПустаяСсылка() Тогда 
			Зал.Параметры.Подразделение = ОтборПоПодразделению;
		КонецЕсли;
		Если Не СотрудникПодразделения = Справочники.Сотрудники.ПустаяСсылка() Тогда 
			Зал.Параметры.СотрудникОтбор = СотрудникПодразделения;
		КонецЕсли;
		Если Не ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.ПустаяСсылка() Тогда 
			Зал.Параметры.ЗадачаРемонта = ОтборПоЗадачеРемонта;
		КонецЕсли;
		Если Проведённые = 1 Тогда
			Зал.Параметры.Проведен = "Не проведённые.";
		ИначеЕсли Проведённые = 2 Тогда 
			Зал.Параметры.Проведен = "Проведённые.";
		КонецЕсли;		
		
	ТаблДок.Вывести(Зал);
	Если ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.Новый Или ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.Принят Тогда
		Обл = Макет.ПолучитьОбласть("ШапкаЗаявки|ОбластьШапкиНовый");
	Иначе
		Обл = Макет.ПолучитьОбласть("ШапкаЗаявки");
	КонецЕсли;
	ТаблДок.Вывести(Обл);
	Если ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.Новый Или ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.Принят Тогда
		Стр = Макет.ПолучитьОбласть("Заявки|ОбластьШапкиНовый");
	Иначе
		Стр = Макет.ПолучитьОбласть("Заявки");
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Проведен И Не Проведённые = 2 Тогда
			Стр.Область().Шрифт = новый Шрифт(,,Истина);
		Иначе
			Стр.Область().Шрифт = Новый Шрифт(,,Ложь);
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления = Ложь Тогда	
			Стр.Параметры.Дата = Формат(ВыборкаДетальныеЗаписи.Дата, "ДЛФ=Д");
			Стр.Параметры.Время = Формат(ВыборкаДетальныеЗаписи.Дата, "ДЛФ=В");
			Стр.Параметры.Номер = ВыборкаДетальныеЗаписи.Номер;
			Стр.Параметры.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
			Стр.Параметры.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
			Стр.Параметры.НомКаб = ВыборкаДетальныеЗаписи.Кабинет;
			Стр.Параметры.ПоискИнвентарныйНомер = ВыборкаДетальныеЗаписи.ПоискИнвентарныйНомер;
			Стр.Параметры.Оборудование = ВыборкаДетальныеЗаписи.Оборудование;
			ТекстОписанияПроблемы = Лев(ВыборкаДетальныеЗаписи.ОписаниеПроблемы,55);
			Если СтрДлина(ВыборкаДетальныеЗаписи.ОписаниеПроблемы) > 55 Тогда 
				ТекстОписанияПроблемы = ТекстОписанияПроблемы +	"...";
			КонецЕсли;        			
			Стр.Параметры.ОписаниеПроблемы = ТекстОписанияПроблемы;
			Стр.Параметры.ЗадачиРемонта = ВыборкаДетальныеЗаписи.ЗадачиРемонта;
			Стр.Параметры.ДатаВыполнения = Формат(ВыборкаДетальныеЗаписи.ДатаВыполнения, "ДЛФ=Д");
			Стр.Параметры.ВремяВыполнения = Формат(ВыборкаДетальныеЗаписи.ДатаВыполнения, "ДЛФ=В");
			Стр.Параметры.ВыполнившийСотрудник = ВыборкаДетальныеЗаписи.ВыполнившийСотрудник;
			Если ПараметрыСеанса.ТекущийПользователь.Пользователь = Истина И СотрудникПодразделения = Справочники.Сотрудники.ПустаяСсылка() Тогда
				Стр.Параметры.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
			КонецЕсли;
			ТаблДок.Вывести(Стр);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблДок;
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	
	ТаблДок = ПечатьНаСервере();
	ТаблДок.ОтображатьСетку = Ложь;
	ТаблДок.Защита = Истина;
	ТаблДок.АвтоМасштаб = Истина;
	ТаблДок.ТолькоПросмотр = Истина;
	ТаблДок.ОтображатьЗаголовки = Ложь;
	ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТаблДок.Показать();
	
КонецПроцедуры

//&НаСервере
//Процедура ПолеСортировкиПриИзмененииНаСервере()
//	Если ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.ПустаяСсылка() Тогда
//		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
//		Если РольДоступна("Администратор") Тогда
//			ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
//		КонецЕсли;
//		ОтборПоДате();
//	Иначе	
//		Если Не ОтборПоЗадачеРемонта = Перечисления.СостояниеРемонта.Готов Тогда
//			ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"Дата",);
//			Если РольДоступна("Администратор") Тогда
//				Список.УсловноеОформление.Элементы.Очистить();
//			КонецЕсли;
//			ЗачеркнутьУдаленое();
//		Иначе
//			ОтборПоДате();
//		КонецЕсли;
//		
//		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", ОтборПоЗадачеРемонта, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
//	КонецЕсли;
//	
////КонецПроцедуры

//&НаКлиенте
//Процедура ПолеСортировкиПриИзменении(Элемент)
//	ПолеСортировкиПриИзмененииНаСервере();	
//КонецПроцедуры

&НаСервере
Процедура ПроведеноПриИзмененииНаСервере()
	Если Проведённые = 2 Тогда
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Проведен", Истина,ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
	ИначеЕсли Проведённые =1 Тогда
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Проведен", Ложь,ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
	Иначе
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"Проведен",);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноПриИзменении(Элемент)
	ПроведеноПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СортироватьПоПодразделениюПриИзмененииНаСервере()
	Если ОтборПоПодразделению = Справочники.Подразделения.ПустаяСсылка() Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"Подразделение",);
		НовыйМассив1 = Новый Массив();
		НовыйФиксМасс1 = Новый ФиксированныйМассив(НовыйМассив1);
		Элементы.СотрудникПодразделения.СвязиПараметровВыбора = НовыйФиксМасс1;
	Иначе	
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Подразделение", ОтборПоПодразделению, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Подразделение", "ОтборПоПодразделению");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыйФиксМасс = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СотрудникПодразделения.СвязиПараметровВыбора = НовыйФиксМасс;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоПодразделениюПриИзменении(Элемент)
	СортироватьПоПодразделениюПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура МесяцОтбораПриИзмененииНаСервере()
	ОтборПоДате();
КонецПроцедуры

&НаКлиенте
Процедура МесяцОтбораПриИзменении(Элемент)
	МесяцОтбораПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборПоДате() 
	Если Не ЗначениеЗаполнено(МесяцОтбора.ДатаНачала) Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"Дата",);		
	Иначе
		МассивДат = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Дата КАК Дата,
		|	ЗаявкаНаРемонт.ЗадачиРемонта КАК ЗадачиРемонта
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	НЕ ЗаявкаНаРемонт.ЗадачиРемонта = &ЗадачиРемонтаГотов";
		
		Запрос.УстановитьПараметр("ЗадачиРемонтаГотов", Перечисления.СостояниеРемонта.Готов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи1 = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
			МассивДат.Добавить(ВыборкаДетальныеЗаписи1.Дата);
		КонецЦикла;
		                       
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Дата КАК Дата,
		|	ЗаявкаНаРемонт.ЗадачиРемонта КАК ЗадачиРемонта
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.Дата МЕЖДУ &Начало И &Конец
		|	И ЗаявкаНаРемонт.ЗадачиРемонта = &ЗадачиРемонта";
		
		Запрос.УстановитьПараметр("Начало", МесяцОтбора.ДатаНачала);
		Запрос.УстановитьПараметр("Конец", МесяцОтбора.ДатаОкончания);
		Запрос.УстановитьПараметр("ЗадачиРемонта", Перечисления.СостояниеРемонта.Готов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи2 = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи2.Следующий() Цикл
			МассивДат.Добавить(ВыборкаДетальныеЗаписи2.Дата);
		КонецЦикла;
		
		
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"Дата",);				
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Дата",МассивДат,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗачеркнутьУдаленое() 
	
	ОбщегоНазначенияНаСервере.УстановитьСортировкуДинамическогоСписка(Список,"Дата",,НаправлениеСортировкиКомпоновкиДанных.Возр,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОФормления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПодразделенияПриИзмененииНаСервере()
	Если СотрудникПодразделения = Справочники.Сотрудники.ПустаяСсылка() Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"Сотрудник",);	
	Иначе	
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"Сотрудник", СотрудникПодразделения, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПодразделенияПриИзменении(Элемент)
	СотрудникПодразделенияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокОбработкаЗаписиНовогоНаСервере()
	ОтборПоДате();
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СписокОбработкаЗаписиНовогоНаСервере();
КонецПроцедуры

&НаСервере
Функция ПоискНовыхСегадня()
	ПоискНовый = Истина;
	
	
	
	Если КоличествоДатСегодняНовых() > 0 И РольДоступна("Администратор") Тогда
		
		Возврат ПоискНовый; 
		
	Иначе
		
		ПоискНовый = Ложь;
		Возврат ПоискНовый;
		
	КонецЕсли;

	
КонецФункции

&НаСервере
Функция КоличествоДатСегодняНовых()
	КоличествоДатСегодня = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаявкаНаРемонт.ЗадачиРемонта = &ЗадачиРемонта
	|	И ЗаявкаНаРемонт.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоДатСегодня = КоличествоДатСегодня +1;
		
	КонецЦикла;
	Возврат КоличествоДатСегодня; 
КонецФункции

&НаСервере
Функция ТекстЗаявок()
	КолличествоНовыхЗаяв = 0;
	КолличествоПринятыхЗаяв = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.ЗадачиРемонта КАК ЗадачиРемонта
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.ПометкаУдаления = &ПометкаУдаления";
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЗадачиРемонта = Перечисления.СостояниеРемонта.Новый Тогда
			КолличествоНовыхЗаяв = КолличествоНовыхЗаяв + 1;
		ИначеЕсли ВыборкаДетальныеЗаписи.ЗадачиРемонта = Перечисления.СостояниеРемонта.Принят Тогда
			КолличествоПринятыхЗаяв = КолличествоПринятыхЗаяв +1;
		КонецЕсли;
	КонецЦикла;
	
	ТекстОповещенияЗаявки = "Всего новых заявок: " + КолличествоНовыхЗаяв + Символы.ПС +
	                        "Всего принятых заявок: " + КолличествоПринятыхЗаяв;
	Возврат ТекстОповещенияЗаявки;
	
КонецФункции

&НаСервере
Функция КартинкаЗаявки()
	
	Возврат БиблиотекаКартинок.Ремонт;
	
КонецФункции

&НаКлиенте
Процедура Обнова()
	ОтборПоДате();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОНовыхЗаявках()
	
	Если ПоискНовыхСегадня() Тогда
		ПоказатьОповещениеПользователя("Есть не принятые заявки!",,ТекстЗаявок(),КартинкаЗаявки(),СтатусОповещенияПользователя.Важное,);
	КонецЕсли;    
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("Обнова", 30, Ложь);

	ПодключитьОбработчикОжидания("ОповещениеОНовыхЗаявках", 1800,Ложь);
КонецПроцедуры

&НаСервере
Процедура ПринятыеМнойПриИзмененииНаСервере()
	Если ПринятыеМной = Ложь Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ВыполнившийСотрудник",);
	ИначеЕсли ПринятыеМной = Истина Тогда	
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ВыполнившийСотрудник", ПараметрыСеанса.ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПринятыеМнойПриИзменении(Элемент)
	ПринятыеМнойПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборЗадачиРемонта()
	
	Если ОтборНовые = Истина И ОтборПринятые = Истина И ОтборГотовые = Истина Тогда
		
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
	ИначеЕсли ОтборНовые = Истина И ОтборПринятые = Истина И ОтборГотовые = Ложь Тогда
		
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", МассивЗадач,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		
	ИначеЕсли ОтборНовые = Истина И ОтборПринятые = Ложь И ОтборГотовые = Истина Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Новый);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", МассивЗадач,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Истина И ОтборГотовые = Истина Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Готов);
		МассивЗадач.Добавить(Перечисления.СостояниеРемонта.Принят);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", МассивЗадач,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		
	ИначеЕсли ОтборНовые = Истина И ОтборПринятые = Ложь И ОтборГотовые = Ложь Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		Список.УсловноеОформление.Элементы.Очистить();
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Истина И ОтборГотовые = Ложь Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Принят, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Ложь И ОтборГотовые = Истина Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Готов, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
	ИначеЕсли ОтборНовые = Ложь И ОтборПринятые = Ложь И ОтборГотовые = Ложь Тогда
		
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ЗадачиРемонта",);
		ОбщегоНазначенияНаСервере.УстановитьУсловноеОформлениеДинамическогоСписка(Список,"ЗадачиРемонта", Перечисления.СостояниеРемонта.Новый, ВидСравненияКомпоновкиДанных.Равно,WebЦвета.НебесноГолубой);
	КонецЕсли;
	ОтборПоДате();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНовыеПриИзменении(Элемент)
	ОтборЗадачиРемонта()
КонецПроцедуры

&НаКлиенте
Процедура ОтборПринятыеПриИзменении(Элемент)
	ОтборЗадачиРемонта()
КонецПроцедуры

&НаКлиенте
Процедура ОтборГотовыеПриИзменении(Элемент)
	ОтборЗадачиРемонта()
КонецПроцедуры

&НаСервере
Процедура ОтборСотрудникСАПРПриИзмененииНаСервере()
	Если ОтборСотрудникСАПР = Справочники.Сотрудники.ПустаяСсылка() Тогда
		ОбщегоНазначенияНаСервере.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,"ВыполнившийСотрудник",);
	ИначеЕсли ЗначениеЗаполнено(ОтборСотрудникСАПР) Тогда	
		ОбщегоНазначенияНаСервере.УстановитьЭлементОтбораДинамическогоСписка(Список,"ВыполнившийСотрудник", ОтборСотрудникСАПР, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСотрудникСАПРПриИзменении(Элемент)
	ОтборСотрудникСАПРПриИзмененииНаСервере();
КонецПроцедуры

//&НаКлиенте
//Процедура ОтборПоЗадачеРемонтаОткрытие(Элемент, СтандартнаяОбработка)
//	
//	Параметры = Новый Структура("Ссылка", ОтборПоЗадачеРемонта);
//	форма = ПолучитьФорму("Перечисление.СостояниеРемонта.ФормаСписка",Параметры);
//	форма.Открыть();
//КонецПроцедуры

//&НаСервере
//Функция ВернутьСписокЗаданий()
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	СостояниеРемонта.Ссылка КАК Ссылка
//	|ИЗ
//	|	Перечисление.СостояниеРемонта КАК СостояниеРемонта";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	СписокП = Новый СписокЗначений;
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		СписокП.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
//	КонецЦикла;
//	
//	Если СписокП.Количество() > 0 Тогда
//		Возврат СписокП;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;
//	
//КонецФункции





