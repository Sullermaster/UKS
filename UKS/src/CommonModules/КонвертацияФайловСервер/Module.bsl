// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РазобратьXML(ТаблицаДанных,ИмяФайла) Экспорт
	
	ТекстXML = Новый ТекстовыйДокумент();
	ТекстXML.Прочитать(ИмяФайла);
	ТекстXML.ЗаменитьСтроку(1,"<?xml version=""1.0"" encoding=""windows-1251""?>");
	ТекстXML.Записать(ИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
	ИмяТекущегоУзла = "";
	НаименованиеТеста = "";
	НомерСкважины = "";
	Пока ЧтениеXML.Прочитать() Цикл
		//ТипУзла = ПолучитьТипУзлаНаСервере("НачалоЭлемента");
		//Сообщить(ЧтениеXML.ТипУзла);
		Если ЧтениеXML.Имя="test" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			 
		ИначеЕсли ЧтениеXML.Имя="numtest" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НаименованиеТеста = "numtest";
		ИначеЕсли ЧтениеXML.Имя="numtest" и ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			НаименованиеТеста = "";	
		ИначеЕсли ЧтениеXML.Имя="dat" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяТекущегоУзла = "dat";
		ИначеЕсли ЧтениеXML.Имя="dat" и ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекущегоУзла = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ИмяТекущегоУзла="dat" Тогда
				МассивЗначений = РазложитьСтрокуВМассивПодстрок(ЧтениеXML.Значение,Символы.ПС,Истина,);
				Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
					МассивПромежуточныхЗначений = РазложитьСтрокуВМассивПодстрок(ЭлементМассива,";",,);
					 НоваяСтрока = ТаблицаДанных.Добавить();
					 Для Индекс = 0 По МассивПромежуточныхЗначений.Количество() - 2 Цикл
						НоваяСтрока.Наименование = НомерСкважины;
						НоваяСтрока["Значение"+Индекс] = Число("0"+МассивПромежуточныхЗначений[Индекс]);
	   				 КонецЦикла;
				КонецЦикла;
			ИначеЕсли НаименованиеТеста = "numtest" Тогда	
				НомерСкважины = ЧтениеXML.Значение;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	ЧтениеXML.Закрыть();
КонецПроцедуры