&НаСервере
Функция ПолучитьДень(ИсходнаяДата, КоличествоПрибавляемыхДней)
	
	Если КоличествоПрибавляемыхДней = NULL Тогда
		КоличествоПрибавляемыхДней = 0;
	КонецЕсли;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ИсходнаяДата, ДЕНЬ, &КоличествоПрибавляемыхДней) КАК ВозвращаемаяДата";
	
	Запрос.УстановитьПараметр("ИсходнаяДата", ИсходнаяДата);
	Запрос.УстановитьПараметр("КоличествоПрибавляемыхДней", КоличествоПрибавляемыхДней);	
	
	Возврат Запрос.Выполнить().Выгрузить()[0].ВозвращаемаяДата;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетПоЛицензиям(Параметр) Экспорт
	
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.ПрограммныйПродукт КАК ПрограммныйПродукт,
	|	Договора.Контрагент КАК Контрагент,
	|	Договора.Количество КАК Количество,
	|	Договора.ДатаНачала КАК ДатаНачала,
	|	Договора.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.Договора.СрезПоследних КАК Договора
	|ГДЕ
	|	Договора.ДатаОкончания МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала";
	
	ДатаОкончанияЛицензии = ПолучитьДень(ТекущаяДата(),Константы.ДнейПроверкиЛицензии.Получить());
	Запрос.УстановитьПараметр("НачалоИнтервала", ТекущаяДата());
	Запрос.УстановитьПараметр("ОкончаниеИнтервала",ДатаОкончанияЛицензии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Параметр = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Параметр.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.ПрограммныйПродукт)+" - заканчивается: "+Формат(ВыборкаДетальныеЗаписи.ДатаОкончания,"ДФ=dd.MM.yyyy"));

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетПоЛицензиямДействующим(Параметр) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договора.ПрограммныйПродукт КАК ПрограммныйПродукт,
		|	Договора.Контрагент КАК Контрагент,
		|	Договора.ДатаНачала КАК ДатаНачала,
		|	Договора.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.Договора.СрезПоследних КАК Договора
		|ГДЕ
		|	Договора.ДатаОкончания >= &ОкончаниеИнтервала
		|	ИЛИ Договора.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Параметр = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Параметр.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.ПрограммныйПродукт)+" - заканчивается: "+Формат(ВыборкаДетальныеЗаписи.ДатаОкончания,"ДФ=dd.MM.yyyy"));
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьВыгрузкуНаСервере() Экспорт
	
	СписокЛицензий = Неопределено;
	ОбработчикФоновыеЗадания.СформироватьОтчетПоЛицензиям(СписокЛицензий);
	Если СписокЛицензий.Количество()>0 Тогда 
		Для Каждого СтрокаЛицензии Из СписокЛицензий Цикл
			ПользователиТелеграмм = Справочники.ИДПользователейТелеграма.Выбрать();
			Пока ПользователиТелеграмм.Следующий()Цикл
				SDK_Telegram.sendMessage(ПользователиТелеграмм.Ссылка.Код,СтрокаЛицензии);
			КонецЦикла;	
		КонецЦикла;
	Иначе
		ЗаписьЖурналаРегистрации("Выполнение отчета",,,,"Нет данных",);		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьВыгрузку() Экспорт
	
	ЗаписьЖурналаРегистрации(Нстр("ru = 'Выгрузка отчета по лицензии'"),УровеньЖурналаРегистрации.Информация,,,Нстр("ru = 'Начата регламентная выгрузка отчета'"));
	ФоновыеЗадания.Выполнить("ОбработчикФоновыеЗадания.ЗапуститьВыгрузкуНаСервере",,"ОтчетПоЛицензии","Отчет по лицензии");
	//ПоказатьОповещениеПользователя("Отчет по лицензии", ,"Запущено задание выгрузки лицензий...", БиблиотекаКартинок.Информация32);
	 
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЛицензииЗапуститьВФоне() Экспорт
		
	
	//ПоказатьОповещениеПользователя("Отчет по лицензии", ,"Запущено задание выгрузки лицензий...", БиблиотекаКартинок.Информация32);
	ОбработчикФоновыеЗадания.ЗапуститьВыгрузку();
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуАрхивов() Экспорт
	
	ФоновыеЗадания.Выполнить("ОбработчикФоновыеЗадания.ЗапуститьПроверкуАрхивовВФоне",,"ПроверкаАрхивов","Проверка архивов");
	 
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуРезультатаПроверкиАрхива() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияПроверкиАрхивовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
		|	НастройкиАрхива.Ссылка КАК Задание,
		|	ЕСТЬNULL(ИсторияПроверкиАрхивовСрезПоследних.РезультатВыполнения, ЛОЖЬ) КАК РезультатВыполнения,
		|	НастройкиАрхива.ПутьКаталогАрхив КАК ПутьКаталогАрхив,
		|	НастройкиАрхива.КоличествоДнейПроверки КАК КоличествоДнейПроверки,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ИсторияПроверкиАрхивовСрезПоследних.Период, ДЕНЬ, НастройкиАрхива.КоличествоДнейПроверки), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПроверки,
		|	НастройкиАрхива.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.ИсторияПроверкиАрхивов.СрезПоследних КАК ИсторияПроверкиАрхивовСрезПоследних
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.НастройкиАрхива КАК НастройкиАрхива
		|		ПО ИсторияПроверкиАрхивовСрезПоследних.Задание = НастройкиАрхива.Ссылка
		|ГДЕ
		|	НастройкиАрхива.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтрокаОтпарвкиРезультатаПроверки = ""; 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатПроверки = Неопределено;
		
		ПараметрыАрхива = Новый Структура;
		ПараметрыАрхива.Вставить("Путь",ВыборкаДетальныеЗаписи.ПутьКаталогАрхив);
		ПараметрыАрхива.Вставить("ДатаПроверки",ПолучитьДень(ТекущаяДата(),ВыборкаДетальныеЗаписи.КоличествоДнейПроверки));
		ПараметрыАрхива.Вставить("Наименование",ВыборкаДетальныеЗаписи.Наименование);
		Если ВыборкаДетальныеЗаписи.РезультатВыполнения Тогда //Проверка выполнялась, надо определить последнюю дату проверки
			Если ВыборкаДетальныеЗаписи.ДатаПроверки<ПараметрыАрхива.ДатаПроверки Тогда //Проверка не выполнялась
				РезультатПроверки = ПроверитьАрхив(ПараметрыАрхива);
			КонецЕсли;
		Иначе //Проверка не выполнялась, либо выполнялась с ошибками
			РезультатПроверки = ПроверитьАрхив(ПараметрыАрхива);
		КонецЕсли;
			
		Если РезультатПроверки = Неопределено Тогда //Проверка уже выполнялась
			ЗаписьЖурналаРегистрации("Проверка архивов",УровеньЖурналаРегистрации.Ошибка,,,"Переданы не корректные параметры",);
		Иначе
			Если РезультатПроверки.РезультатОшибки Тогда
				СтрокаОтпарвкиРезультатаПроверки = СтрокаОтпарвкиРезультатаПроверки+РезультатПроверки.Результат+Символы.ПС;
				ЗаписьЖурналаРегистрации("Проверка архивов",УровеньЖурналаРегистрации.Информация,,,РезультатПроверки.Результат,);
			Иначе
			КонецЕсли;
			ЗафиксироватьВыполнение(ВыборкаДетальныеЗаписи.Задание,Не РезультатПроверки.РезультатОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаОтпарвкиРезультатаПроверки;
	
КонецФункции

&НаСервере
Процедура ЗапуститьПроверкуАрхивовВФоне() Экспорт
	
	СтрокаОтпарвкиРезультатаПроверки = ПолучитьСтрокуРезультатаПроверкиАрхива();
	
	Если СтрокаОтпарвкиРезультатаПроверки="" Тогда
	Иначе
		ПользователиТелеграмм = Справочники.ИДПользователейТелеграма.Выбрать();
		Пока ПользователиТелеграмм.Следующий()Цикл
			SDK_Telegram.sendMessage(ПользователиТелеграмм.Ссылка.Код,СтрокаОтпарвкиРезультатаПроверки);
		КонецЦикла;		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьВыполнение(Задание,РезультатПроверки)
	
	НоваяЗапись = РегистрыСведений.ИсторияПроверкиАрхивов.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = ТекущаяДата();
	НоваяЗапись.Задание = Задание;
	НоваяЗапись.РезультатВыполнения = РезультатПроверки;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьАрхив(ПараметрыАрхива) Экспорт
	
	Результат = Новый Структура;

	Если Не ПараметрыАрхива.Свойство("Путь") Тогда
		Результат.Вставить("РезультатОшибки",Истина);
		Результат.Вставить("Результат","Не определен путь к архиву");
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПараметрыАрхива.Свойство("ДатаПроверки") Тогда
		Результат.Вставить("РезультатОшибки",Истина);
		Результат.Вставить("Результат","Не определена дата проверки архива");
		Возврат Результат;
	КонецЕсли;
	
	МассивНайденныхФайлов = НайтиФайлы(
		ПараметрыАрхива.Путь, // где искать
		"*.*", // маска поиска
		Ложь // если Истина, то будет искать и в подкаталогах
		);
		
	Если МассивНайденныхФайлов.Количество()=0 Тогда
		Результат.Вставить("РезультатОшибки",Истина);
		Результат.Вставить("Результат","Количество найденных файлов: 0");
		Возврат Результат;
	КонецЕсли; 
	
	Для Каждого ФайлИзКаталога Из МассивНайденныхФайлов Цикл
		РазмерФайла = ФайлИзКаталога.Размер();
		ДатаФайла = ФайлИзКаталога.ПолучитьВремяИзменения();
		Если Формат(ДатаФайла,"ДФ=dd.MM.yyyy")=Формат(ПараметрыАрхива.ДатаПроверки,"ДФ=dd.MM.yyyy") Тогда
			Если РазмерФайла = 0 Тогда
				Результат.Вставить("РезультатОшибки",Истина);
				Результат.Вставить("Результат","Архив "+ПараметрыАрхива.Наименование+" за "+Формат(ПараметрыАрхива.ДатаПроверки,"ДФ=dd.MM.yyyy")+" НЕ найден");
			Иначе
				Результат.Вставить("РезультатОшибки",Ложь);
				Результат.Вставить("Результат",ФайлИзКаталога.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат.Свойство("РезультатОшибки") Тогда
		Результат.Вставить("РезультатОшибки",Истина);
		Результат.Вставить("Результат","Архив "+ПараметрыАрхива.Наименование+" за "+Формат(ПараметрыАрхива.ДатаПроверки,"ДФ=dd.MM.yyyy")+" НЕ найден (Не определенно)");
	Иначе
		Если Результат.РезультатОшибки Тогда
			Результат.Вставить("РезультатОшибки",Истина);
			Результат.Вставить("Результат","Архив "+ПараметрыАрхива.Наименование+" за "+Формат(ПараметрыАрхива.ДатаПроверки,"ДФ=dd.MM.yyyy")+" НЕ найден");
		Иначе
			Результат.Вставить("РезультатОшибки",Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Процедура ОтправитьТестовоеПисьмо() Экспорт
	
	Почта = Новый ИнтернетПочта; 
	Письмо = Новый ИнтернетПочтовоеСообщение; 
	Текст = Письмо.Тексты.Добавить(ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("ТекстПисьма")); 
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Письмо.Тема = ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("ТемаПисьма"); 
	Письмо.Отправитель = ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("ПользовательSMTP"); 
	Письмо.ИмяОтправителя = ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("ИмяОтправителя");
	Письмо.Получатели.Добавить(ОбщегоНазначенияНаСервере.ПолучитьЗначениеКонстанты("Получатель"));
	Попытка 
		Почта.Подключиться(ОбщийРаботаСПочтойКлиентСервер.ПолучитьПрофильПочты());
		Почта.Послать(Письмо);
		ЗаписьЖурналаРегистрации("Отпарвка письма",УровеньЖурналаРегистрации.Информация,,,"Отправленно",);
	Исключение 
		//Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("Отпарвка письма",УровеньЖурналаРегистрации.Информация,,,ОписаниеОшибки(),);
	КонецПопытки;
		//Закрываем письмо
	Почта.Отключиться();
	
КонецПроцедуры

&наСервере
Процедура СформироватьСписокЗаявок(Статус,Параметр) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Дата КАК Дата,
		|	ЗаявкаНаРемонт.Сотрудник КАК Сотрудник,
		|	ЗаявкаНаРемонт.Подразделение КАК Подразделение,
		|	ЗаявкаНаРемонт.Кабинет КАК Кабинет,
		|	ЗаявкаНаРемонт.ОписаниеПроблемы КАК ОписаниеПроблемы
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.ЗадачиРемонта = &Статус";
		
	Запрос.УстановитьПараметр("Статус", Статус);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Параметр = Новый Массив;
	СообщениеВТелеграм = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СообщениеВТелеграм = СтрШаблон("%6 заявка от %5: %1 (каб. %4), %2 - %3",
										СокрЛП(ВыборкаДетальныеЗаписи.Подразделение.Наименование),
										СокрЛП(ВыборкаДетальныеЗаписи.Сотрудник.Наименование),
										СокрЛП(ВыборкаДетальныеЗаписи.ОписаниеПроблемы),
										СокрЛП(ВыборкаДетальныеЗаписи.Кабинет),
										Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yy"),
										СокрЛП(Статус));
		Параметр.Добавить(СообщениеВТелеграм);
	КонецЦикла;
	
	
КонецПроцедуры