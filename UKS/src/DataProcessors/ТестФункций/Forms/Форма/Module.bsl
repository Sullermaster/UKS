
// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОтчета(Команда)
	
	ОбработкаОтчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОтчетаНаСервере()
	
	//ОбработчикФоновыеЗадания.ЗапуститьВыгрузку();
	// ОбработчикФоновыеЗадания.ЗапуститьПроверкуАрхивовВФоне();
	  WshShell  = Новый COMОбъект("Wscript.Shell");
	ИмяКомпьютера = WshShell.ExpandEnvironmentStrings("%computername%");
	Сообщить(ИмяКомпьютера);
	
КонецПроцедуры

&НаСервере
Процедура ИсправлениеРегистраНаСервере()
	
	Выборка = РегистрыСведений.ЖурналОтпечатаныхЛистов.Выбрать(,,,);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеРегистра(Команда)
	ИсправлениеРегистраНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧтение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияКомпоненты",ЭтаФорма);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения,"d:\RFID\ACSAddInWin64_1_0_0_4.dll","Сканер",ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияКомпоненты(Подключено,ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ОбъектДайвера = Новый("Addin.Сканер.RFID");
		
		СтрокаПараметров = "";
		//Результат = Компонента.ПолучитьПараметры(СтрокаПараметров);
		Резельтат = ОбъектДайвера.ПолучитьПараметры(СтрокаПараметров);
		
		Результат = ОбъектДайвера.УстановитьПараметр("Model","ACS ACR122 0");

		ИДУстройства = "";
		Подключен = ОбъектДайвера.Подключить(ИДУстройства);
		
		РезультатТеста = "";
		ДополнительныеДанные = "";
		ТестУстройства = ОбъектДайвера.ТестУстройства(РезультатТеста,ДополнительныеДанные);
		
		ОписаниеОшибки = "";
		ОбъектДайвера.ПолучитьОшибку(ОписаниеОшибки);
		
		УИДКарты = "";
	    Прочитана = ОбъектДайвера.ПолучитьUID(УИДКарты);
		
		ИДПакета = "";
		ТаблицаМеток = "";
		ОбъектДайвера.ПолучитьДанныеМетокRFID(УИДКарты,ИДПакета,ТаблицаМеток);
		
		Сообщить("ИДУстройства = "+ИДУстройства+" --> "+Подключен+" Прочитана = "+Прочитана+" УИДКарты = "+УИДКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкоректироватьФайл()
	
	//<?xml version="1.0" encoding="windows-1251"?>
	ТекстXML = Новый ТекстовыйДокумент();
	ТекстXML.Прочитать(Объект.ПутьКФайлу);
	ТекстXML.ЗаменитьСтроку(1,"<?xml version=""1.0"" encoding=""windows-1251""?>");
	ТекстXML.Записать(Объект.ПутьКФайлу);
	
КонецПроцедуры // СкоректироватьФайл()

&НаКлиенте
Процедура ОткрытьФайлXML(Команда)
	
	СкоректироватьФайл();
	Объект.ЗначенияДанных.Очистить();
	
	Если Объект.ТипЧтения="Последовательное" Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Объект.ПутьКФайлу);
		
		ИмяТекущегоУзла = "";
		НаименованиеТеста = "";
		НомерСкважины = "";
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя="test" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				 
			ИначеЕсли ЧтениеXML.Имя="numtest" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НаименованиеТеста = "numtest";
			ИначеЕсли ЧтениеXML.Имя="numtest" и ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				НаименованиеТеста = "";	
			ИначеЕсли ЧтениеXML.Имя="dat" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяТекущегоУзла = "dat";
			ИначеЕсли ЧтениеXML.Имя="dat" и ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ИмяТекущегоУзла = "";
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Если ИмяТекущегоУзла="dat" Тогда
					МассивЗначений = РазложитьСтрокуВМассивПодстрок(ЧтениеXML.Значение,Символы.ПС,Истина,);
					Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
						МассивПромежуточныхЗначений = РазложитьСтрокуВМассивПодстрок(ЭлементМассива,";",,);
						 НоваяСтрока = Объект.ЗначенияДанных.Добавить();
						 Для Индекс = 0 По МассивПромежуточныхЗначений.Количество() - 2 Цикл
							НоваяСтрока.Наименование = НомерСкважины;
							НоваяСтрока["Значение"+Индекс] = Число("0"+МассивПромежуточныхЗначений[Индекс]);
   						 КонецЦикла;
					КонецЦикла;
				ИначеЕсли НаименованиеТеста = "numtest" Тогда	
					НомерСкважины = ЧтениеXML.Значение;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли  Объект.ТипЧтения="XDTO" Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Объект.ПутьКФайлу);
		
		ОбъектЧтенияXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	ВыгрузитьВExcel();
	
КонецПроцедуры

Процедура ВыгрузитьВExcel()
	
	Если Объект.ЗначенияДанных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
      
    // Загрузка объекта Microsoft Excel
   // 	Состояние("Выгрузка данных из 1С в Microsoft Excel...");
    	ExcelПриложение = Новый COMОбъект("Excel.Application");
    Исключение
	    Сообщить("Ошибка при запуске Microsoft Excel."
         + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
        Возврат;
    КонецПопытки;
	
	 // Создадим книгу, по умолчанию в ней уже есть листы
	Книга = ExcelПриложение.WorkBooks.Add();
	
	// Используем первый лист книги Excel
    Лист = Книга.WorkSheets(1);
    // Сформировать шапку документа в первой строке листа
	Лист.Cells(1,1).Value = "Номер скважины";
	НомерСтроки = 2;
    Для Каждого Строка из Объект.ЗначенияДанных цикл
    	Лист.Cells(НомерСтроки,1).Value = Строка.Наименование;
		Лист.Cells(НомерСтроки,2).Value = Строка.Значение0;
		Лист.Cells(НомерСтроки,3).Value = Строка.Значение1;
		Лист.Cells(НомерСтроки,4).Value = Строка.Значение2;
		Лист.Cells(НомерСтроки,5).Value = Строка.Значение3;
		Лист.Cells(НомерСтроки,6).Value = Строка.Значение4;
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
	ExcelПриложение.Visible = Истина; 
 	//ExcelПриложение.Activate(); 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОБъект.ТипЧтения = "Последовательное";
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Проводник = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	
	Проводник.Заголовок = "Выберите файл";
	Проводник.Фильтр = "Табличный документ GXL|*.gxl|Табличный документ XML|*.xml";
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайла",ЭтотОбъект);
	
	Проводник.Показать(Оповещение);
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПутьКФайлу = ВыбранныеФайлы[0];
	
КонецПроцедуры // ПослеВыбораФайла()


&НаСервере
Процедура ПроверитьАрхивыНаСервере()
	
	ОбработчикФоновыеЗадания.ЗапуститьПроверкуАрхивовВФоне();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАрхивы(Команда)
	
	
	ПроверитьАрхивыНаСервере();
		
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьXML()
	
	ЗаписьXML = Новый ЧтениеXML;
	ЗаписьXML.ОткрытьФайл("D:\PGVHMobile\Backup\upload.xml");
	Пока ЗаписьXML.Прочитать() Цикл
		Сообщить(Строка(ЗаписьXML.Имя));
		Если ВозможностьЧтенияXML(ЗаписьXML) Тогда
			ОбъектXML = ПрочитатьXML(ЗаписьXML);
			//ОбъектXML.Записать();
			//Сообщить(Строка(ОбъектXML));
		КонецЕсли; 
	КонецЦикла;
	
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьXMLНаКлиенте(Команда)
	
	ЗагрузитьXML();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПрофильПочты()
	
	//Создаем профиль либо считываем из справочника 
	Профиль = Новый ИнтернетПочтовыйПрофиль; 
	Профиль.АдресСервераSMTP = "smtp.gmail.com";//Отправитель.АдресСервераSMTP; //"smtp.mail.ru";  
	Профиль.ПортSMTP = 465;//Отправитель.ПортSMTP; //587; 
	Профиль.Пользователь = "itpgvh@gmail.com";// Отправитель.Email; //"test@mail.ru"; 
	Профиль.Пароль = "pgvh1srv$adm"; //Отправитель.Пароль; //"123456789"; 
	Профиль.ПользовательSMTP =  "itpgvh@gmail.com";//Отправитель.Email; //"test@mail.ru"; 
	Профиль.ПарольSMTP = "pgvh1srv$adm";//Отправитель.Пароль; //"123456789"; 
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	Профиль.ИспользоватьSSLPOP3 = Истина;
	Профиль.ИспользоватьSSLSMTP = Истина;  
	//Создаем письмо 
	Возврат Профиль;
	
КонецФункции 

&НаКлиенте
Процедура ОтправитьПочту(Команда)
	
	Почта = Новый ИнтернетПочта; 
	Письмо = Новый ИнтернетПочтовоеСообщение; 
	Текст = Письмо.Тексты.Добавить("Тестовое письмо"); 
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Письмо.Тема = "Тестовое письмо"; 
	Письмо.Отправитель = "itpgvh@gmail.com"; 
	Письмо.ИмяОтправителя = "БОТ";
	Письмо.Получатели.Добавить("it@ipgvh.by");
	Попытка 
		Почта.Подключиться(ПолучитьПрофильПочты()); Почта.Послать(Письмо); Предупреждение("Письмо отправлено",3);
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		//Закрываем письмо
	Почта.Отключиться(); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПриложение(Команда)
	
	КомандаСистемы(СокрЛП(СтрокаКоманды));
	
КонецПроцедуры
